#[macro_use]
extern crate serde_derive;

extern crate serde_json;

extern crate chrono;

use std::collections::HashMap;

use std::process::Command;

use std::env;

fn main() {

	
  /*let args = ["-b28.06.1961",
		  "-ut11.25",
		  "-fPLEBS",
		  "-sid1",
		  "-topo-13.667,65.1,30",
		  "-house-13.667,65.1,W"];

  let output = Command::new("swetest")
  	.args(&args)
  	.output().unwrap_or_else(|e| {
	    panic!("failed to execute process: {}", e)
	});
	let txt:String = String::from_utf8_lossy(&output.stdout).into_owned();

  let data = map_to_lines(txt);
	
	let serialized = serde_json::to_string(&data).unwrap();
	println!("{:?}",serialized)*/;

  let output = Command::new("ls")
    .args(&["-lh"])
    .output().unwrap_or_else(|e| {
      panic!("failed to execute process: {}", e)
  });
  let txt:String = String::from_utf8_lossy(&output.stdout).into_owned();

  let data = map_to_lines(txt);

  c1 = String::from("Hi, this is another sample sentence");*/

  println!("{:?}", txt);

	let serialized = serde_json::to_string(&data).unwrap();
  println!("{:?}",serialized);
}

fn map_to_lines<'a(txt:String) -> Vec<&'a str> {
  let mut lineItems:Vec<&str> = Vec::new();

  let lines = txt.lines().map(|line| line.trim());
  for line in lines {
    lineItems.push(line);
  }
  lineItems
}



